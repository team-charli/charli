// Setup type definitions for built-in Supabase Runtime APIs
import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { ethers } from "https://esm.sh/ethers@5.7.0";


// Add this at the top of your file, replacing [...] with the actual ABI
const abi =[{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"CannotAddFunctionToDiamondThatAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes4[]","name":"_selectors","type":"bytes4[]"}],"name":"CannotAddSelectorsToZeroAddress","type":"error"},{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"CannotRemoveFunctionThatDoesNotExist","type":"error"},{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"CannotRemoveImmutableFunction","type":"error"},{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"CannotReplaceFunctionThatDoesNotExists","type":"error"},{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet","type":"error"},{"inputs":[{"internalType":"bytes4[]","name":"_selectors","type":"bytes4[]"}],"name":"CannotReplaceFunctionsFromFacetWithZeroAddress","type":"error"},{"inputs":[{"internalType":"bytes4","name":"_selector","type":"bytes4"}],"name":"CannotReplaceImmutableFunction","type":"error"},{"inputs":[{"internalType":"uint8","name":"_action","type":"uint8"}],"name":"IncorrectFacetCutAction","type":"error"},{"inputs":[{"internalType":"address","name":"_initializationContractAddress","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"InitializationFunctionReverted","type":"error"},{"inputs":[{"internalType":"address","name":"_contractAddress","type":"address"},{"internalType":"string","name":"_message","type":"string"}],"name":"NoBytecodeAtAddress","type":"error"},{"inputs":[{"internalType":"address","name":"_facetAddress","type":"address"}],"name":"NoSelectorsProvidedForFacetForCut","type":"error"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_contractOwner","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"_facetAddress","type":"address"}],"name":"RemoveFacetAddressMustBeZeroAddress","type":"error"},{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamond.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"indexed":false,"internalType":"struct IDiamond.FacetCut[]","name":"_diamondCut","type":"tuple[]"},{"indexed":false,"internalType":"address","name":"_init","type":"address"},{"indexed":false,"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"DiamondCut","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamond.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"internalType":"struct IDiamond.FacetCut[]","name":"_diamondCut","type":"tuple[]"},{"internalType":"address","name":"_init","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"diamondCut","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_functionSelector","type":"bytes4"}],"name":"facetAddress","outputs":[{"internalType":"address","name":"facetAddress_","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facetAddresses","outputs":[{"internalType":"address[]","name":"facetAddresses_","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_facet","type":"address"}],"name":"facetFunctionSelectors","outputs":[{"internalType":"bytes4[]","name":"_facetFunctionSelectors","type":"bytes4[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facets","outputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"internalType":"struct IDiamondLoupe.Facet[]","name":"facets_","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"owner_","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"CallerNotOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newResolverAddress","type":"address"}],"name":"ContractResolverAddressSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"authMethodType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"id","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"userPubkey","type":"bytes"}],"name":"PermittedAuthMethodAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"authMethodType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"id","type":"bytes"}],"name":"PermittedAuthMethodRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"authMethodType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"id","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"scopeId","type":"uint256"}],"name":"PermittedAuthMethodScopeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"authMethodType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"id","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"scopeId","type":"uint256"}],"name":"PermittedAuthMethodScopeRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"group","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"RootHashUpdated","type":"event"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"ipfsCID","type":"bytes"},{"internalType":"uint256[]","name":"scopes","type":"uint256[]"}],"name":"addPermittedAction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256[]","name":"scopes","type":"uint256[]"}],"name":"addPermittedAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"components":[{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"},{"internalType":"bytes","name":"userPubkey","type":"bytes"}],"internalType":"struct LibPKPPermissionsStorage.AuthMethod","name":"authMethod","type":"tuple"},{"internalType":"uint256[]","name":"scopes","type":"uint256[]"}],"name":"addPermittedAuthMethod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"},{"internalType":"uint256","name":"scopeId","type":"uint256"}],"name":"addPermittedAuthMethodScope","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256[]","name":"permittedAuthMethodTypesToAdd","type":"uint256[]"},{"internalType":"bytes[]","name":"permittedAuthMethodIdsToAdd","type":"bytes[]"},{"internalType":"bytes[]","name":"permittedAuthMethodPubkeysToAdd","type":"bytes[]"},{"internalType":"uint256[][]","name":"permittedAuthMethodScopesToAdd","type":"uint256[][]"},{"internalType":"uint256[]","name":"permittedAuthMethodTypesToRemove","type":"uint256[]"},{"internalType":"bytes[]","name":"permittedAuthMethodIdsToRemove","type":"bytes[]"}],"name":"batchAddRemoveAuthMethods","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"}],"name":"getAuthMethodId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getEthAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getPermittedActions","outputs":[{"internalType":"bytes[]","name":"","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getPermittedAddresses","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"},{"internalType":"uint256","name":"maxScopeId","type":"uint256"}],"name":"getPermittedAuthMethodScopes","outputs":[{"internalType":"bool[]","name":"","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getPermittedAuthMethods","outputs":[{"components":[{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"},{"internalType":"bytes","name":"userPubkey","type":"bytes"}],"internalType":"struct LibPKPPermissionsStorage.AuthMethod[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPkpNftAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getPubkey","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRouterAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"}],"name":"getTokenIdsForAuthMethod","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"}],"name":"getUserPubkeyForAuthMethod","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"ipfsCID","type":"bytes"}],"name":"isPermittedAction","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"isPermittedAddress","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"}],"name":"isPermittedAuthMethod","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"},{"internalType":"uint256","name":"scopeId","type":"uint256"}],"name":"isPermittedAuthMethodScopePresent","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"ipfsCID","type":"bytes"}],"name":"removePermittedAction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"removePermittedAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"}],"name":"removePermittedAuthMethod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"authMethodType","type":"uint256"},{"internalType":"bytes","name":"id","type":"bytes"},{"internalType":"uint256","name":"scopeId","type":"uint256"}],"name":"removePermittedAuthMethodScope","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newResolverAddress","type":"address"}],"name":"setContractResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"group","type":"uint256"},{"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"setRootHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"group","type":"uint256"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"name":"verifyState","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"group","type":"uint256"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"bool[]","name":"proofFlags","type":"bool[]"},{"internalType":"bytes32[]","name":"leaves","type":"bytes32[]"}],"name":"verifyStates","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}] ;
Deno.serve(async (req) => {
  if (req.method !== "POST") {
    return new Response(JSON.stringify({ error: "Method not allowed" }),
      { status: 405, headers: { "Content-Type": "application/json" } });
  }

  let relayerPkpTokenId: string;
  let relayerPkpTokenIdBigNumber: ethers.BigNumber;

  try {
    const body = await req.text();
    console.log("Received body:", body);

    const json = JSON.parse(body);
    console.log("Parsed JSON:", json);

    relayerPkpTokenId = json.relayerPkpTokenId;
    console.log("Extracted relayerPkpTokenId:", relayerPkpTokenId);

    if (!relayerPkpTokenId) {
      throw new Error("relayerPkpTokenId is missing or undefined");
    }

    relayerPkpTokenIdBigNumber = ethers.BigNumber.from(relayerPkpTokenId);
    console.log("Created BigNumber:", relayerPkpTokenIdBigNumber.toString());

  } catch (parseError) {
    console.error("Error processing request:", parseError);
    return new Response(JSON.stringify({ error: parseError.message, stack: parseError.stack }),
      { status: 400, headers: { "Content-Type": "application/json" } });
  }

const checkRelayerPkpPermittedActions = async (tokenId: ethers.BigNumber) => {
  const privateKey = Deno.env.get("RELAYER_MANAGER_PRIVATE_KEY");
  if (!privateKey) {
    throw new Error("RELAYER_MANAGER_PRIVATE_KEY is not set");
  }
  const provider = new ethers.providers.JsonRpcProvider("https://yellowstone-rpc.litprotocol.com/");
  const wallet = new ethers.Wallet(privateKey, provider);
  const contractAddress = "0xf64638F1eb3b064f5443F7c9e2Dc050ed535D891";
  const contract = new ethers.Contract(contractAddress, abi, wallet);

  console.log("Calling getPermittedAuthMethods with:", tokenId.toString());
  const permittedAuthMethods = await contract.getPermittedAuthMethods(tokenId);
  console.log("Received permittedAuthMethods:", permittedAuthMethods);

  // Process the data to extract IPFS CIDs
  const processedData = permittedAuthMethods.map((method: any) => {
    return {
      type: method.authMethodType.toNumber(), // Convert BigNumber to regular number
      ipfsCid: method.id, // Keep the IPFS CID as a hexadecimal string
      userPubkey: method.userPubkey // Keep as is
    };
  });

  return processedData;
};

  // In the main Deno.serve function:
try {
  const data = await checkRelayerPkpPermittedActions(relayerPkpTokenIdBigNumber);
  return new Response(
    JSON.stringify({ permittedAuthMethods: data }),
    { headers: { "Content-Type": "application/json" } }
  );
} catch (error) {
  console.error("Error in contract call:", error);
  return new Response(
    JSON.stringify({ error: error.message, stack: error.stack }),
    { status: 500, headers: { "Content-Type": "application/json" } }
  );
}
});

/* To invoke locally:

  1. Run `supabase start` (see: https://supabase.com/docs/reference/cli/supabase-start)
  2. Make an HTTP request:

  curl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/checkRelayerPkpPermittedActions-dev' \
    --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
    --header 'Content-Type: application/json' \
    --data '{"relayerPkpTokenId": $relayerPkpTokenId}'

*/
