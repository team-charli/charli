import { ethers } from 'ethers';
import jwt from 'jsonwebtoken';

async function verifyUserSignature(ethereumAddress, signature, nonce) {
  try {
    const recoveredAddress = ethers.utils.verifyMessage(nonce, signature);
    return recoveredAddress.toLowerCase() === ethereumAddress.toLowerCase();
  } catch (error) {
    console.error('Error in verifying signature:', error);
    return false;
  }
}

async function handleRequest(request) {
  try {
    if (request.method !== 'POST') {
      return new Response('Method not allowed', { status: 405 });
    }

    const { ethereumAddress, signature, nonce } = await request.json();

    const isVerified = await verifyUserSignature(ethereumAddress, signature, nonce);
    if (!isVerified) {
      return new Response(JSON.stringify({ error: 'Unauthorized - Invalid signature' }), { status: 401 });
    }

    const token = jwt.sign({ sub: ethereumAddress }, SECRET_KEY, { algorithm: 'HS512' });

    return new Response(JSON.stringify({ token }), { status: 200, headers: { 'Content-Type': 'application/json' } });
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: { 'Content-Type': 'application/json' } });
  }
}

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

const SECRET_KEY = 'your_jwt_secret_key_here';

